/*


–£ –Ω–∞—Å –∏–º–µ–µ—Ç—Å—è 6 —Å–æ–±—ã—Ç–∏–π:

1) WS —Å–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–∏–ª–∞—Å—å
2) WS —Å–µ—Å—Å–∏—è –æ—Ç–∫–ª—é—á–∏–ª–∞—Å—å
3) –ü–æ–¥–ø–∏—Å–∫—É –¥–æ–±–∞–≤–∏–ª–∏
4) –ü–æ–¥–ø–∏—Å–∫—É –æ—Ç–º–µ–Ω–∏–ª–∏
–ò –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç Redis:
5) –ö–ª—é—á –ø–æ—è–≤–∏–ª—Å—è/–∏–∑–º–µ–Ω–∏–ª—Å—è
6) –ö–ª—é—á —É–¥–∞–ª–∏–ª—Å—è

–ò—Ç–∞–∫, —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ A, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–µ –æ—Ñ–æ—Ä–º–∏–ª–∏:
foo/      1,2,5,88
foo/dir/  3,50
xz/value   2,3,4,88

–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è —Ç–∞–∫:

[DONE] –í —Å–ª—É—á–∞–µ 2 - –æ–±—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–æ–º–µ—Ä 5; –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, —Ç–æ —É–¥–∞–ª—è–µ–º –∏ —Å–∞–º—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.

[DONE] –í —Å–ª—É—á–∞–µ 3 - –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞, —Ç–æ —Å–æ–∑–¥–∞—Ç—å; –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.

[DONE] –í —Å–ª—É—á–∞–µ 4 - —É–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ–ø—É—Å—Ç–µ–ª–∞, —Ç–æ —É–¥–∞–ª–∏—Ç—å –∏ –µ–µ.

–í —Å–ª—É—á–∞—è—Ö 5 –∏ 6 –º—ã –æ–±—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ä–∞–∑ –í–°–Æ —Ç–∞–±–ª–∏—Ü—É A, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–∞–∂–¥–æ–π
–ø–æ–¥–ø–∏—Å–∫–æ–π, –∏ –≤—ã—è—Å–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
-- –ï—Å–ª–∏ –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã  === –∫–ª—é—á—É - —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ –≤—Å–µ–º ID
-- –ï—Å–ª–∏ –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "/" –∏ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º –∫–ª—é—á–∞ –∏ –µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "$" - —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ –≤—Å–µ–º ID


–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –•—Ä–∞–Ω–∏—Ç—å
—Ç–∞–±–ª–∏—Ü—É –ë, –≥–¥–µ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏, –∞ –∫ –∫–∞–∂–¥–æ–º—É
–ø—Ä–∏–≤—è–∑–∞–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ê. –¢–∞–∫ —á—Ç–æ –æ–±—Ö–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –ê
–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è –∫–ª—é—á–∞. –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É
–ø–æ—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∫–ª—é—á–∞ —ç—Ç–æ, —è —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ
(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–ª –Ω–∞–±–∏—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç), —Ç–æ
—Å–º—ã—Å–ª–∞ –¥–µ–ª–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ë —è –Ω–µ –≤–∏–∂—É, –æ–Ω–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ
—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –æ–±—Ö–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã –ê –∫–∞–∂–¥—ã–π —Ä–∞–∑.

*/

use std::collections::HashSet;

// ------

use actix::prelude::*;
use std::collections::HashMap;




fn subscription_matches(sub_key: &str, key: &str) -> bool {
    if sub_key == key { return true; }
    if sub_key.ends_with('/') && key.starts_with(sub_key) {
        let rest = &key[sub_key.len()..];
        return !rest.contains('$');
    }
    false
}




/// Message from Hub to Session (JSON-string)

/*
#[derive(Message)]
#[rtype(result = "()")]
pub struct ServerMessage(pub String);
*/

#[derive(Message, Clone, Debug)]
#[rtype(result = "()")]
pub struct ServerMessage {
    pub event: RedisEvent,
}



use crate::redis_events::RedisEvent;
//    Redis(RedisEvent), // üëà –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

/*
#[derive(Message, Clone)]
#[rtype(result = "()")]
pub enum ServerMessage {
    Text(String),
    KeyEvent { db: u32, key: String, kind: RedisEvent },
}
*/

/*
/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º
#[derive(Message)]
#[rtype(result = "()")]
pub struct Broadcast {
    pub text: String,
}
*/

/// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
#[derive(Message)]
#[rtype(result = "usize")]
pub struct Count;

pub type SessionId = u64;

pub struct WsHub {
    sessions: HashMap<SessionId, Recipient<ServerMessage>>,
    subs: HashMap<String, HashSet<SessionId>>, // –ú–∞—Å—Å–∏–≤ –º–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: key -> {id, id, id ...}
    next_id: SessionId,
}

impl Default for WsHub {
    fn default() -> Self {
        Self {
	    sessions: HashMap::new(),
            subs: HashMap::new(),
	    next_id: 1u64,
	 }
    }
}

impl Actor for WsHub {
    type Context = Context<Self>;
}




#[derive(Message)]
#[rtype(result = "SessionId")]
pub struct Connect {
    pub addr: Recipient<ServerMessage>,
}

impl Handler<Connect> for WsHub {
    type Result = SessionId;

    fn handle(&mut self, msg: Connect, _ctx: &mut Context<Self>) -> Self::Result {
	// LEVENT 1
        let id = self.next_id;
        self.next_id = self.next_id.wrapping_add(1);
        self.sessions.insert(id, msg.addr);
        println!("[ws_hub] session connected: id={id} (total={})", self.sessions.len());
        id
    }
}


#[derive(Message)]
#[rtype(result = "()")]
pub struct Disconnect {
    pub session_id: SessionId,
}

impl Handler<Disconnect> for WsHub {
    type Result = ();

    fn handle(&mut self, msg: Disconnect, _ctx: &mut Context<Self>) {
	// LEVENT 2

        // Delete all subscribes
        self.subs.retain(|_key, session_ids| {
            session_ids.remove(&msg.session_id);
            !session_ids.is_empty()
        });

        let existed = self.sessions.remove(&msg.session_id).is_some();
        if existed {
            println!("[ws_hub] session disconnected: id={} (total={})", msg.session_id, self.sessions.len());
        } else {
            println!("[ws_hub] disconnect for unknown id={}", msg.session_id);
        }
    }
}

/*
impl Handler<Broadcast> for WsHub {
    type Result = ();

    fn handle(&mut self, msg: Broadcast, _: &mut Context<Self>) {
        let Broadcast { text } = msg;
        // —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º; –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ —Å–µ—Å—Å–∏—è –æ—Ç–≤–∞–ª–∏–ª–∞—Å—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        for (_, recp) in self.sessions.iter() {
            let _ = recp.do_send(ServerMessage(text.clone()));
        }
    }
}
*/



#[derive(Message)]
#[rtype(result = "Vec<String>")]
pub struct SubscribeList {
    pub session_id: SessionId,
}

impl Handler<SubscribeList> for WsHub {
    type Result = MessageResult<SubscribeList>;

    fn handle(&mut self, msg: SubscribeList, _ctx: &mut Context<Self>) -> Self::Result {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏, –≥–¥–µ session_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        let list = self.subs
            .iter()
            .filter_map(|(key, sessions)| {
                if sessions.contains(&msg.session_id) {
                    Some(key.clone())
                } else {
                    None
                }
            })
            .collect::<Vec<String>>();

        MessageResult(list)
    }
}





















impl Handler<Count> for WsHub {
    type Result = usize;

    fn handle(&mut self, _: Count, _: &mut Context<Self>) -> Self::Result {
        self.sessions.len()
    }
}



// –ì–æ—Ä–æ–¥–∏–º –º–∞—Å—Å–∏–≤ –ø–æ–¥–ø–∏—Å–æ–∫


#[derive(Message)]
#[rtype(result = "()")]
pub struct Subscribe {
    pub session_id: SessionId,
    pub key: String,
}

impl Handler<Subscribe> for WsHub {
    type Result = ();
    fn handle(&mut self, msg: Subscribe, _ctx: &mut Context<Self>) {
        self.subs.entry(msg.key).or_default().insert(msg.session_id);
    }
}

/*
#[derive(Message)]
#[rtype(result = "bool")]
pub struct Subscribe {
    pub session_id: SessionId,
    pub key: String,
}

impl Handler<Subscribe> for WsHub {
    type Result = MessageResult<Subscribe>;
    fn handle(&mut self, msg: Subscribe, _ctx: &mut Context<Self>) -> Self::Result {
        let subs = self.subs.entry(msg.key).or_default();
        let added = subs.insert(msg.session_id); // true
        MessageResult(added)
    }
}
*/

#[derive(Message)]
#[rtype(result = "()")]
pub struct Unsubscribe {
    pub session_id: SessionId,
    pub key: String,
}

impl Handler<Unsubscribe> for WsHub {
    type Result = ();
    fn handle(&mut self, msg: Unsubscribe, _ctx: &mut Context<Self>) {
        if let Some(set) = self.subs.get_mut(&msg.key) {
            set.remove(&msg.session_id);
            if set.is_empty() { self.subs.remove(&msg.key); }
        }
    }
}

/*
#[derive(Message)]
#[rtype(result = "bool")]
pub struct Unsubscribe {
    pub session_id: SessionId,
    pub key: String,
}

impl Handler<Unsubscribe> for WsHub {
    type Result = MessageResult<Unsubscribe>;
    fn handle(&mut self, msg: Unsubscribe, _ctx: &mut Context<Self>) -> Self::Result {
        let mut removed = false;
        if let Some(set) = self.subs.get_mut(&msg.key) {
            removed = set.remove(&msg.session_id); // true
            if set.is_empty() { self.subs.remove(&msg.key); }
        }
        MessageResult(removed)
    }
}
*/

#[derive(Message)]
#[rtype(result = "()")]
pub struct UnsubscribeAll {
    pub session_id: SessionId,
}

impl Handler<UnsubscribeAll> for WsHub {
    type Result = ();
    fn handle(&mut self, msg: UnsubscribeAll, _ctx: &mut Context<Self>) {
        self.subs.retain(|_key, session_ids| {
            session_ids.remove(&msg.session_id);
            !session_ids.is_empty()
        });
    }
}

/*
#[derive(Message)]
#[rtype(result = "bool")]
pub struct UnsubscribeAll {
    pub session_id: SessionId,
}

impl Handler<UnsubscribeAll> for WsHub {
    type Result = MessageResult<UnsubscribeAll>;
    fn handle(&mut self, msg: UnsubscribeAll, _ctx: &mut Context<Self>) -> Self::Result {
        let mut x = false;
        self.subs.retain(|_key, session_ids| {
            if session_ids.remove(&msg.session_id) { x = true; }
            !session_ids.is_empty()
        });
        MessageResult(x)
    }
}
*/


#[derive(Message)]
#[rtype(result = "HashMap<String, Vec<SessionId>>")]
pub struct TestGetSubs;

impl Handler<TestGetSubs> for WsHub {
    type Result = MessageResult<TestGetSubs>;

    fn handle(&mut self, _msg: TestGetSubs, _ctx: &mut Context<Self>) -> Self::Result {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HashSet ‚Üí Vec –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        let s: HashMap<String, Vec<SessionId>> = self.subs
            .iter()
            .map(|(key, ids)| (key.clone(), ids.iter().copied().collect()))
            .collect();

        MessageResult(s)
    }
}



// .. ==================================

/*
// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WsHub, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
#[derive(Message, Clone)]
#[rtype(result = "()")]
pub struct FanoutKeyEvent {
    pub db: u32,
    pub key: String,
    pub kind: RedisEvent,
}
*/

// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—É –≤—ã—à–µ
impl WsHub {
    fn subscribers_for(&self, key: &str) -> HashSet<SessionId> {
        let mut out = HashSet::new();
        for (sub_key, set) in &self.subs {
            if subscription_matches(sub_key, key) {
                out.extend(set.iter().copied());
            }
        }
        out
    }
}







// use actix::prelude::*;
// use crate::redis_events::RedisEvent;

impl Handler<RedisEvent> for WsHub {
    type Result = ();

    fn handle(&mut self, msg: RedisEvent, _ctx: &mut Context<Self>) {
        let targets = self.subscribers_for(&msg.key);
        if targets.is_empty() { return; }

        let payload = ServerMessage { event: msg.clone() };

        for sid in targets {
            if let Some(rcpt) = self.sessions.get(&sid) {
                let _ = rcpt.do_send(payload.clone());
            }
        }
    }
}

/*

impl Handler<FanoutKeyEvent> for WsHub {
    type Result = ();

    fn handle(&mut self, msg: FanoutKeyEvent, _ctx: &mut Context<Self>) {
        let targets = self.subscribers_for(&msg.event.key);
        if targets.is_empty() { return; }

        let payload = ServerMessage { event: msg.event.clone() };
        for sid in targets {
            if let Some(rcpt) = self.sessions.get(&sid) {
                let _ = rcpt.do_send(payload.clone());
            }
        }
    }
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å—ã–ª–∞–µ—Ç ServerMessage –≤—Å–µ–º, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω
impl Handler<FanoutKeyEvent> for WsHub {
    type Result = ();

    fn handle(&mut self, msg: FanoutKeyEvent, _ctx: &mut Context<Self>) {
        let targets = self.subscribers_for(&msg.key);
        if targets.is_empty() { return; }

        // –°—Ñ–æ—Ä–º–∏—Ä—É–π payload –ø–æ–¥ —Å–≤–æ–π —Ç–∏–ø ServerMessage
        // –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤—å –≤–∞—Ä–∏–∞–Ω—Ç KeyEvent –≤ —Ç–≤–æ–π ServerMessage
//        let payload = ServerMessage::KeyEvent {
//            db: msg.db,
//            key: msg.key.clone(),
//            kind: msg.kind.clone(),
//        };

//	let payload = ServerMessage { event: ev.clone() };
        let payload = ServerMessage { event: msg.event.clone() };

        for sid in targets {
            if let Some(rcpt) = self.sessions.get(&sid) { let _ = rcpt.do_send(payload.clone()); }
        }
    }
}

*/





/*
/// stat
use actix_web::{web, HttpResponse};
use actix::Addr;
use serde_json::json;

// use crate::ws_hub::{WsHub, Count};

pub async fn stat(hub: web::Data<Addr<WsHub>>) -> HttpResponse {
    let count = hub.send(Count).await.unwrap_or(0);
    HttpResponse::Ok().json(json!({ "connections": count }))
}
*/